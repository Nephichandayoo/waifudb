
[
  {
    "name": "Infiltration",
    "events": [
      {
        "name": "Security Patrol",
        "description": "Patroli keamanan mendekat dengan senter menyala!",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Scout')",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 5); 'Scout melihat patroli dan memandu tim bersembunyi. Semua kehilangan 5 HP karena stres';",
            "reward": 100
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Infiltrator')",
            "effect": "'Infiltrator memimpin tim melewati bayangan, lolos tanpa jejak';",
            "reward": 120
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Decoy')",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 3); 'Decoy mengalihkan perhatian patroli dengan trik cerdas. Semua kehilangan 3 HP karena ketegangan';",
            "reward": 110
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Flashbang'))",
            "effect": "const userWithFlash = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Flashbang')); db.get_user(userWithFlash).heistinven=db.get_user(userWithFlash).heistinven.filter(i=>i.name!=='Flashbang'); room.players.forEach(p => room.heist.health[p] -= 8); 'Seseorang melempar Flashbang, mengalihkan patroli. Semua kehilangan 8 HP';",
            "reward": 80
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 15); 'Tim ketahuan dan harus bertarung. Semua kehilangan 15 HP';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Locked Door",
        "description": "Pintu baja besar menghalangi jalan tim.",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Demolitionist' && (db.get_user(p).heistinven||[]).some(i => i.name==='C4'))",
            "effect": "const demo = room.players.find(p => room.roles[p] === 'Demolitionist' && (db.get_user(p).heistinven||[]).some(i => i.name==='C4')); db.get_user(demo).heistinven=db.get_user(demo).heistinven.filter(i=>i.name!=='C4'); 'Demolitionist meledakkan pintu dengan C4';",
            "reward": 150
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Hacker' && (db.get_user(p).heistinven||[]).some(i => i.name==='Laptop'))",
            "effect": "'Hacker membobol panel keamanan dengan Laptop';",
            "reward": 120
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Enforcer')",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 5); 'Enforcer memaksa pintu dengan kekuatan fisik. Semua kehilangan 5 HP karena usaha';",
            "reward": 100
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Crowbar'))",
            "effect": "const userWithCrowbar = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Crowbar')); db.get_user(userWithCrowbar).heistinven=db.get_user(userWithCrowbar).heistinven.filter(i=>i.name!=='Crowbar'); room.players.forEach(p => room.heist.health[p] -= 5); 'Seseorang memaksa pintu dengan Crowbar, tapi tim kelelahan. Semua kehilangan 5 HP';",
            "reward": 90
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 10); 'Tim memaksa pintu terbuka dengan alat seadanya, kehilangan 10 HP masing-masing';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Negotiation Opportunity",
        "description": "Penjaga tampak ragu dan bisa dibujuk.",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Negotiator')",
            "effect": "'Negotiator berbicara dengan penjaga, meyakinkannya untuk membiarkan tim lewat';",
            "reward": 200
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Decoy')",
            "effect": "'Decoy memalsukan situasi darurat, penjaga pergi memeriksa';",
            "reward": 180
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Flashbang'))",
            "effect": "const userWithFlash = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Flashbang')); db.get_user(userWithFlash).heistinven=db.get_user(userWithFlash).heistinven.filter(i=>i.name!=='Flashbang'); 'Seseorang melempar Flashbang, penjaga panik dan tim lolos';",
            "reward": 100
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 10); 'Tim gagal bernegosiasi dan harus bertarung. Semua kehilangan 10 HP';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Dark Corridor",
        "description": "Koridor gelap menyulitkan navigasi tim.",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Infiltrator')",
            "effect": "'Infiltrator memandu tim dengan insting tajam, lolos tanpa masalah';",
            "reward": 130
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Scout')",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 3); 'Scout menemukan jalur aman, tapi lambat. Semua kehilangan 3 HP';",
            "reward": 110
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Night Vision Goggles'))",
            "effect": "'Night Vision Goggles membantu tim melihat di kegelapan';",
            "reward": 100
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 12); 'Tim tersandung di kegelapan, kehilangan 12 HP masing-masing';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Medical Emergency",
        "description": "Seorang anggota tim terluka ringan saat menyelinap.",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Medic')",
            "effect": "room.players.forEach(p => room.heist.health[p] += 5); 'Medic merawat luka, semua pulih 5 HP';",
            "reward": 150
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Medkit'))",
            "effect": "const userWithMedkit = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Medkit')); db.get_user(userWithMedkit).heistinven=db.get_user(userWithMedkit).heistinven.filter(i=>i.name!=='Medkit'); 'Medkit digunakan untuk menyembuhkan luka';",
            "reward": 100
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 10); 'Luka dibiarkan, tim kehilangan 10 HP masing-masing';",
            "reward": 0
          }
        ]
      }
    ]
  },
  {
    "name": "Reaching Target",
    "events": [
      {
        "name": "Alarm System",
        "description": "Sistem alarm canggih melindungi target.",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Hacker')",
            "effect": "room.heist.atkBonus = (room.heist.atkBonus || 0) + 10; 'Hacker menonaktifkan alarm. Bonus +10 ATK akhir';",
            "reward": 150
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Engineer')",
            "effect": "room.heist.atkBonus = (room.heist.atkBonus || 0) + 8; 'Engineer memodifikasi alarm untuk keuntungan tim. Bonus +8 ATK akhir';",
            "reward": 130
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Wire Cutters'))",
            "effect": "const userWithCutters = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Wire Cutters')); db.get_user(userWithCutters).heistinven=db.get_user(userWithCutters).heistinven.filter(i=>i.name!=='Wire Cutters'); room.heist.atkBonus = (room.heist.atkBonus || 0) + 5; 'Wire Cutters memutus kabel alarm. Bonus +5 ATK akhir';",
            "reward": 100
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 10); 'Alarm berbunyi, keamanan meningkat. Semua kehilangan 10 HP';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Complex Layout",
        "description": "Tata letak bangunan sangat membingungkan.",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Mastermind')",
            "effect": "room.heist.atkBonus = (room.heist.atkBonus || 0) + 15; 'Mastermind merencanakan rute yang efisien. Bonus +15 ATK akhir';",
            "reward": 180
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Scout')",
            "effect": "room.heist.atkBonus = (room.heist.atkBonus || 0) + 10; 'Scout menemukan jalur pintas. Bonus +10 ATK akhir';",
            "reward": 150
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Thermal Scanner'))",
            "effect": "room.heist.atkBonus = (room.heist.atkBonus || 0) + 8; 'Thermal Scanner membantu navigasi. Bonus +8 ATK akhir';",
            "reward": 120
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 5); 'Tim tersesat sebentar, kehilangan 5 HP masing-masing';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Laser Grid",
        "description": "Jaringan laser menghalangi akses ke target.",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Infiltrator')",
            "effect": "'Infiltrator meliuk melewati laser dengan gesit';",
            "reward": 200
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Engineer')",
            "effect": "room.heist.atkBonus = (room.heist.atkBonus || 0) + 5; 'Engineer menonaktifkan laser sementara. Bonus +5 ATK akhir';",
            "reward": 150
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Laser Deflector'))",
            "effect": "const userWithDeflector = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Laser Deflector')); db.get_user(userWithDeflector).heistinven=db.get_user(userWithDeflector).heistinven.filter(i=>i.name!=='Laser Deflector'); 'Laser Deflector menetralkan laser';",
            "reward": 130
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 15); 'Tim terdeteksi laser, kehilangan 15 HP masing-masing';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Vault Mechanism",
        "description": "Brankas dilindungi mekanisme rumit.",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Engineer')",
            "effect": "'Engineer membongkar mekanisme dengan presisi';",
            "reward": 180
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Hacker' && (db.get_user(p).heistinven||[]).some(i => i.name==='Hacking Drone'))",
            "effect": "const userWithDrone = room.players.find(p => room.roles[p] === 'Hacker' && (db.get_user(p).heistinven||[]).some(i => i.name==='Hacking Drone')); db.get_user(userWithDrone).heistinven=db.get_user(userWithDrone).heistinven.filter(i=>i.name!=='Hacking Drone'); 'Hacking Drone membobol brankas';",
            "reward": 150
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Stethoscope'))",
            "effect": "const success = Math.random() < 0.8; const userWithStethoscope = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Stethoscope')); if (success) { db.get_user(userWithStethoscope).heistinven=db.get_user(userWithStethoscope).heistinven.filter(i=>i.name!=='Stethoscope'); 'Stethoscope membantu membuka brankas'; } else { room.players.forEach(p => room.heist.health[p] -= 10); 'Gagal membuka, tim kehilangan 10 HP'; }",
            "reward": 120
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 12); 'Tim gagal membuka brankas, memicu alarm kecil. Semua kehilangan 12 HP';",
            "reward": 0
          }
        ]
      }
    ]
  },
  {
    "name": "Executing Heist",
    "events": [
      {
        "name": "Guard Confrontation",
        "description": "Sekelompok penjaga bersenjata menghadang!",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Sniper')",
            "effect": "room.heist.atkBonus = (room.heist.atkBonus || 0) + 20; 'Sniper menetralkan penjaga dari jarak jauh. Bonus +20 ATK akhir';",
            "reward": 250
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Negotiator')",
            "effect": "'Negotiator menenangkan situasi, tim lolos tanpa pertarungan';",
            "reward": 200
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Enforcer')",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 5); 'Enforcer memimpin pertarungan, mengurangi kerusakan. Semua kehilangan 5 HP';",
            "reward": 180
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Silenced Pistol'))",
            "effect": "const userWithPistol = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Silenced Pistol')); db.get_user(userWithPistol).heistinven=db.get_user(userWithPistol).heistinven.filter(i=>i.name!=='Silenced Pistol'); room.heist.atkBonus = (room.heist.atkBonus || 0) + 10; 'Silenced Pistol digunakan untuk menetralkan penjaga secara diam-diam. Bonus +10 ATK akhir';",
            "reward": 150
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 15); 'Tim bertarung sengit, kehilangan 15 HP masing-masing';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Trap Detection",
        "description": "Area ini dipenuhi jebakan tersembunyi.",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Scout')",
            "effect": "'Scout mendeteksi dan menonaktifkan jebakan dengan cermat';",
            "reward": 200
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Engineer')",
            "effect": "'Engineer menonaktifkan jebakan dengan alat khusus';",
            "reward": 180
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Thermal Scanner'))",
            "effect": "'Thermal Scanner mengungkap jebakan, tim menghindarinya';",
            "reward": 150
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 20); 'Tim terkena jebakan, kehilangan 20 HP masing-masing';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Heavy Resistance",
        "description": "Pasukan keamanan elit menghadang tim.",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Sniper')",
            "effect": "room.heist.atkBonus = (room.heist.atkBonus || 0) + 15; 'Sniper mengambil posisi, melemahkan musuh. Bonus +15 ATK akhir';",
            "reward": 220
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Enforcer')",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 8); 'Enforcer menahan serangan, mengurangi kerusakan. Semua kehilangan 8 HP';",
            "reward": 200
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='RPG'))",
            "effect": "const userWithRPG = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='RPG')); db.get_user(userWithRPG).heistinven=db.get_user(userWithRPG).heistinven.filter(i=>i.name!=='RPG'); room.heist.atkBonus = (room.heist.atkBonus || 0) + 10; 'RPG menghancurkan barikade musuh. Bonus +10 ATK akhir';",
            "reward": 180
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 25); 'Tim kewalahan, kehilangan 25 HP masing-masing';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Critical Injury",
        "description": "Pertarungan sengit menyebabkan luka serius pada tim.",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Medic')",
            "effect": "room.players.forEach(p => room.heist.health[p] += 10); 'Medic menangani luka, semua pulih 10 HP';",
            "reward": 200
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Enforcer')",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 5); 'Enforcer melindungi tim, mengurangi kerusakan. Semua kehilangan 5 HP';",
            "reward": 180
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Adrenaline Shot'))",
            "effect": "const userWithShot = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Adrenaline Shot')); db.get_user(userWithShot).heistinven=db.get_user(userWithShot).heistinven.filter(i=>i.name!=='Adrenaline Shot'); room.players.forEach(p => room.heist.health[p] += 5); 'Adrenaline Shot meningkatkan stamina, semua pulih 5 HP';",
            "reward": 150
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 15); 'Tanpa perawatan, tim kehilangan 15 HP masing-masing';",
            "reward": 0
          }
        ]
      }
    ]
  },
  {
    "name": "Escape",
    "events": [
      {
        "name": "SWAT Arrival",
        "description": "Tim SWAT mengepung lokasi!",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Driver')",
            "effect": "'Driver mengemudikan tim keluar dari kepungan dengan kecepatan tinggi';",
            "reward": 200
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Scout')",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 10); 'Scout memandu tim lewat pintu rahasia. Semua kehilangan 10 HP';",
            "reward": 150
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Smoke Grenade'))",
            "effect": "const userWithSmoke = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Smoke Grenade')); db.get_user(userWithSmoke).heistinven=db.get_user(userWithSmoke).heistinven.filter(i=>i.name!=='Smoke Grenade'); room.players.forEach(p => room.heist.health[p] -= 15); 'Seseorang melempar Smoke Grenade untuk kabur. Semua kehilangan 15 HP';",
            "reward": 100
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Getaway Car'))",
            "effect": "const userWithCar = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Getaway Car')); db.get_user(userWithCar).heistinven=db.get_user(userWithCar).heistinven.filter(i=>i.name!=='Getaway Car'); 'Getaway Car mempercepat pelarian tim tanpa jejak';",
            "reward": 180
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 20); 'Tim kewalahan oleh SWAT. Semua kehilangan 20 HP';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Roadblock",
        "description": "Polisi memasang barikade besar di jalur pelarian.",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Demolitionist')",
            "effect": "'Demolitionist menghancurkan barikade dengan ledakan terkontrol';",
            "reward": 180
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Driver')",
            "effect": "'Driver melaju melewati barikade dengan manuver berani';",
            "reward": 170
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Explosives'))",
            "effect": "const userWithExplosives = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Explosives')); db.get_user(userWithExplosives).heistinven=db.get_user(userWithExplosives).heistinven.filter(i=>i.name!=='Explosives'); 'Explosives meledakkan barikade';",
            "reward": 150
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 15); 'Tim mencari jalur lain, kehilangan 15 HP masing-masing';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Pursuit",
        "description": "Mobil polisi mengejar tim di jalan raya.",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Driver')",
            "effect": "'Driver melakukan manuver cerdas, menghilangkan polisi';",
            "reward": 200
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Infiltrator')",
            "effect": "'Infiltrator menemukan rute samping untuk menghindari kejaran';",
            "reward": 180
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Getaway Car'))",
            "effect": "const userWithCar = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Getaway Car')); db.get_user(userWithCar).heistinven=db.get_user(userWithCar).heistinven.filter(i=>i.name!=='Getaway Car'); 'Getaway Car melaju kencang, meninggalkan polisi';",
            "reward": 170
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 18); 'Kejaran sengit, tim kehilangan 18 HP masing-masing';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Mechanical Failure",
        "description": "Kendaraan tim tiba-tiba bermasalah saat kabur.",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Engineer')",
            "effect": "'Engineer memperbaiki kendaraan dengan cepat';",
            "reward": 150
          },
          {
            "condition": "room.players.some(p => room.roles[p] === 'Driver')",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 5); 'Driver memaksa kendaraan tetap berjalan. Semua kehilangan 5 HP karena tekanan';",
            "reward": 130
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Wire Cutters'))",
            "effect": "const userWithCutters = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Wire Cutters')); db.get_user(userWithCutters).heistinven=db.get_user(userWithCutters).heistinven.filter(i=>i.name!=='Wire Cutters'); 'Wire Cutters digunakan untuk perbaikan darurat';",
            "reward": 120
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => room.heist.health[p] -= 12); 'Tim terpaksa berjalan, kehilangan 12 HP masing-masing';",
            "reward": 0
          }
        ]
      }
    ]
  },
  {
    "name": "Sabotage Encounter",
    "events": [
      {
        "name": "EMP Pulse Attack",
        "description": "Gelombang EMP kuat menyerang, mengacaukannya senjata dan peralatan tim!",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Hacker')",
            "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 10); }); 'Hacker meminimalkan efek EMP, tetapi senjata tim melemah. ATK setiap pemain berkurang 10';",
            "reward": 60
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Jamming Device'))",
            "effect": "const userWithJammer = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Jamming Device')); db.get_user(userWithJammer).heistinven=db.get_user(userWithJammer).heistinven.filter(i=>i.name!=='Jamming Device'); room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 5); }); 'Jamming Device menyerap EMP, tetapi hancur. ATK setiap pemain berkurang 5';",
            "reward": 80
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Laptop' || i.name==='Hacking Drone'))",
            "effect": "const userWithTech = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Laptop' || i.name==='Hacking Drone')); const itemToDestroy = (db.get_user(userWithTech).heistinven||[]).find(i => i.name==='Laptop' || i.name==='Hacking Drone').name; db.get_user(userWithTech).heistinven=db.get_user(userWithTech).heistinven.filter(i=>i.name!==itemToDestroy); room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 15); }); 'EMP menghancurkan perangkat teknologi, melemahkan koordinasi tim. ATK setiap pemain berkurang 15';",
            "reward": 40
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 20); room.heist.health[p] = Math.max(0, (room.heist.health[p] || 0) - 10); }); 'EMP menghantam keras, merusak senjata dan stamina tim. ATK setiap pemain berkurang 20, semua kehilangan 10 HP';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Weapon Sabotage",
        "description": "Penyabot merusak amunisi, menyebabkan senjata tim gagal berfungsi!",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Engineer')",
            "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 10); }); 'Engineer memperbaiki sebagian senjata, tetapi kerusakan tetap ada. ATK setiap pemain berkurang 10';",
            "reward": 50
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Silenced Pistol' || i.name==='Pistol' || i.name==='Sniper Rifle'))",
            "effect": "const userWithWeapon = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Silenced Pistol' || i.name==='Pistol' || i.name==='Sniper Rifle')); const weaponToDestroy = (db.get_user(userWithWeapon).heistinven||[]).find(i => i.name==='Silenced Pistol' || i.name==='Pistol' || i.name==='Sniper Rifle').name; db.get_user(userWithWeapon).heistinven=db.get_user(userWithWeapon).heistinven.filter(i=>i.name!==weaponToDestroy); room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 15); }); 'Senjata tim rusak parah, satu senjata hancur. ATK setiap pemain berkurang 15';",
            "reward": 30
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='RPG'))",
            "effect": "const userWithRPG = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='RPG')); db.get_user(userWithRPG).heistinven=db.get_user(userWithRPG).heistinven.filter(i=>i.name!=='RPG'); room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 20); }); 'RPG hancur karena sabotase, melemahkan daya ledak tim. ATK setiap pemain berkurang 20';",
            "reward": 20
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 25); room.heist.health[p] = Math.max(0, (room.heist.health[p] || 0) - 12); }); 'Semua senjata gagal total, tim terpaksa bertahan. ATK setiap pemain berkurang 25, semua kehilangan 12 HP';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Corrosive Trap",
        "description": "Perangkap gas korosif merusak peralatan dan senjata tim!",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Medic')",
            "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 5); }); 'Medic membantu tim menghindari gas, tetapi senjata tetap terkorosi. ATK setiap pemain berkurang 5';",
            "reward": 70
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Bulletproof Vest'))",
            "effect": "const userWithVest = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Bulletproof Vest')); db.get_user(userWithVest).heistinven=db.get_user(userWithVest).heistinven.filter(i=>i.name!=='Bulletproof Vest'); 'Bulletproof Vest melindungi tim, tetapi rompi hancur akibat korosi';",
            "reward": 60
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Tactical Helmet'))",
            "effect": "const userWithHelmet = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Tactical Helmet')); db.get_user(userWithHelmet).heistinven=db.get_user(userWithHelmet).heistinven.filter(i=>i.name!=='Tactical Helmet'); 'Tactical Helmet menahan gas, tetapi helm rusak total';",
            "reward": 50
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => { const inv = db.get_user(p).heistinven || []; if (inv.length > 0) { const itemToDestroy = inv[Math.floor(Math.random() * inv.length)].name; db.get_user(p).heistinven = inv.filter(i => i.name !== itemToDestroy); } room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 15); }); 'Gas korosif menghancurkan satu item acak dari setiap pemain dan melemahkan senjata. ATK setiap pemain berkurang 15';",
            "reward": 0
          }
        ]
      },
      {
        "name": "Explosive Malfunction",
        "description": "Perangkat peledak tim gagal, memicu kerusakan tak terduga!",
        "resolutions": [
          {
            "condition": "room.players.some(p => room.roles[p] === 'Demolitionist')",
            "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 10); }); 'Demolitionist mengendalikan situasi, tetapi ledakan merusak senjata. ATK setiap pemain berkurang 10';",
            "reward": 60
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='C4'))",
            "effect": "const userWithC4 = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='C4')); db.get_user(userWithC4).heistinven=db.get_user(userWithC4).heistinven.filter(i=>i.name!=='C4'); room.players.forEach(p => { room.heist.health[p] = Math.max(0, (room.heist.health[p] || 0) - 10); }); 'C4 meledak prematur, hancur dan melukai tim. Semua kehilangan 10 HP';",
            "reward": 40
          },
          {
            "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Explosives'))",
            "effect": "const userWithExplosives = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Explosives')); db.get_user(userWithExplosives).heistinven=db.get_user(userWithExplosives).heistinven.filter(i=>i.name!=='Explosives'); room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 15); }); 'Explosives gagal dan hancur, melemahkan daya ledak tim. ATK setiap pemain berkurang 15';",
            "reward": 30
          },
          {
            "condition": "true",
            "effect": "room.players.forEach(p => { const inv = db.get_user(p).heistinven || []; if (inv.length > 0) { const itemToDestroy = inv[Math.floor(Math.random() * inv.length)].name; db.get_user(p).heistinven = inv.filter(i => i.name !== itemToDestroy); } room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 20); room.heist.health[p] = Math.max(0, (room.heist.health[p] || 0) - 15); }); 'Ledakan tak terduga menghancurkan satu item acak dari setiap pemain, melemahkan senjata dan stamina. ATK setiap pemain berkurang 20, semua kehilangan 15 HP';",
            "reward": 0
          }
        ]
      }
    ]
  },
  {
    "name": "Weapon Jam",
    "description": "Senjata tiba-tiba macet saat hendak menembak!",
    "resolutions": [
      {
        "condition": "room.players.some(p => room.roles[p] === 'Gunner')",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 8) }); 'Gunner mencoba memperbaiki, tapi semua senjata kehilangan 8 ATK'",
        "reward": 50
      },
      {
        "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Rifle'))",
        "effect": "const userWithRifle = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Rifle')) db.get_user(userWithRifle).heistinven = db.get_user(userWithRifle).heistinven.filter(i=>i.name!=='Rifle') room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 12) }); 'Rifle macet parah dan hancur, semua kehilangan 12 ATK'",
        "reward": 30
      },
      {
        "condition": "true",
        "effect": "room.players.forEach(p => { const inv = db.get_user(p).heistinven||[] if (inv.length>0) { const drop = inv[Math.floor(Math.random()*inv.length)].name db.get_user(p).heistinven = inv.filter(i=>i.name!==drop) } room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0)-10) }); 'Kesalahan mekanik menghapus satu item acak dan mengurangi 10 ATK tiap pemain'",
        "reward": 0
      }
    ]
  },
  {
    "name": "Sabotaged Ammo",
    "description": "Amunisi dirusak sebelum pertempuran dimulai!",
    "resolutions": [
      {
        "condition": "room.players.some(p => room.roles[p] === 'Saboteur')",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 15) }); 'Saboteur tertangkap tapi amunisi tetap rusak, semua kehilangan 15 ATK'",
        "reward": 70
      },
      {
        "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='AmmoBox'))",
        "effect": "const userWithAmmo = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='AmmoBox')) db.get_user(userWithAmmo).heistinven = db.get_user(userWithAmmo).heistinven.filter(i=>i.name!=='AmmoBox') room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 20) }); 'AmmoBox meledak dan hancur, semua kehilangan 20 ATK'",
        "reward": 40
      },
      {
        "condition": "true",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0)-5) }); 'Amunisi kadaluwarsa, semua kehilangan 5 ATK tanpa kehilangan item'",
        "reward": 10
      }
    ]
  },
  {
    "name": "Corrupted Gadget",
    "description": "Gadget elektronik rusak, menyebabkan malfungsi!",
    "resolutions": [
      {
        "condition": "room.players.some(p => room.roles[p] === 'Hacker')",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 10) }); 'Hacker mencoba reset, tapi semua gadget kehilangan 10 ATK'",
        "reward": 55
      },
      {
        "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Drone'))",
        "effect": "const userWithDrone = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Drone')) db.get_user(userWithDrone).heistinven = db.get_user(userWithDrone).heistinven.filter(i=>i.name!=='Drone') room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p] || 0) - 18) }); 'Drone rusak total, semua kehilangan 18 ATK'",
        "reward": 35
      },
      {
        "condition": "true",
        "effect": "room.players.forEach(p => { const inv = db.get_user(p).heistinven||[] if (inv.length>0) { const bad = inv[Math.floor(Math.random()*inv.length)].name db.get_user(p).heistinven = inv.filter(i=>i.name!==bad) } room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0)-15) }); 'Malfungsi acak menghancurkan satu gadget dan mengurangi 15 ATK tiap pemain'",
        "reward": 0
      }
    ]
  },
  {
    "name": "Precision Strike",
    "description": "Serangan terarah dari jauh mengincar titik lemah musuh!",
    "resolutions": [
      {
        "condition": "room.players.some(p => room.roles[p] === 'Sniper')",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = (room.heist.attack[p] || 0) + 20 }) 'Sniper mengunci target, semua ATK +20 selama ronde ini'",
        "reward": 100
      },
      {
        "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Sniper Rifle'))",
        "effect": "const userWithSR = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Sniper Rifle')) room.heist.attack[userWithSR] = (room.heist.attack[userWithSR] || 0) + 50 'Pengguna Sniper Rifle mendapatkan +50 ATK satu kali tembakan'",
        "reward": 80
      },
      {
        "condition": "true",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0) - 5) }) 'Angin kencang mengganggu bidikan, semua ATK -5'",
        "reward": 10
      }
    ]
  },
  {
    "name": "EMP Blast",
    "description": "Ledakan elektromagnetik mematikan perangkat elektronik!",
    "resolutions": [
      {
        "condition": "room.players.some(p => room.roles[p] === 'Engineer')",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0) - 15) }) 'Engineer gagal meredam, semua ATK -15 dari malfungsi gadget'",
        "reward": 60
      },
      {
        "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.type==='tool' && ['Laptop','Hacking Drone','Jamming Device','Thermal Scanner','Night Vision Goggles'].includes(i.name)))",
        "effect": "const userWithTech = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.type==='tool' && ['Laptop','Hacking Drone','Jamming Device','Thermal Scanner','Night Vision Goggles'].includes(i.name))) db.get_user(userWithTech).heistinven = db.get_user(userWithTech).heistinven.filter(i => !(i.type==='tool' && ['Laptop','Hacking Drone','Jamming Device','Thermal Scanner','Night Vision Goggles'].includes(i.name))) room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0) - 20) }) 'Perangkat elektronik hancur, semua kehilangan 20 ATK dan item tool rusak'",
        "reward": 40
      },
      {
        "condition": "true",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0) - 10) }) 'EMP menyebar luas, semua kehilangan 10 ATK tanpa kehilangan item'",
        "reward": 20
      }
    ]
  },
  {
    "name": "High-Speed Chase",
    "description": "Pengejaran kendaraan memaksa tim menembakkan sambil bergerak!",
    "resolutions": [
      {
        "condition": "room.players.some(p => room.roles[p] === 'Driver')",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = (room.heist.attack[p] || 0) + 10 }) 'Driver ahli manuver, semua ATK +10 selama pengejaran'",
        "reward": 70
      },
      {
        "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Getaway Car'))",
        "effect": "const userWithCar = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Getaway Car')) room.heist.attack[userWithCar] = (room.heist.attack[userWithCar] || 0) + 25 'Getaway Car memberikan posisi tembak lebih baik, ATK +25 satu kali'",
        "reward": 50
      },
      {
        "condition": "true",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0) - 8) }) 'Guncangan kendaraan mengganggu bidikan, semua ATK -8'",
        "reward": 15
      }
    ]
  },
  {
    "name": "Undercover Ambush",
    "description": "Mereka menyamar dan menyerang secara tiba-tiba!",
    "resolutions": [
      {
        "condition": "room.players.some(p => room.roles[p] === 'Infiltrator')",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = (room.heist.attack[p] || 0) + 15 }) 'Infiltrator membuka jalan, semua ATK +15 di serangan pertama'",
        "reward": 75
      },
      {
        "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Silenced Pistol'))",
        "effect": "const userWithSP = room.players.find(p => (db.get_user(p).heistinven||[]).some(i => i.name==='Silenced Pistol')) room.heist.attack[userWithSP] = (room.heist.attack[userWithSP] || 0) + 20 'Silenced Pistol efektif, ATK +20 pada serangan diam'",
        "reward": 60
      },
      {
        "condition": "true",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0) - 12) }) 'Mereka terkejut dan kehilangan fokus, semua ATK -12'",
        "reward": 0
      }
    ]
  },
  {
    "name": "Senjata Macet",
    "description": "Beberapa senjata gagal ditembakkan karena kotoran atau rusak.",
    "resolutions": [
      {
        "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.type === 'weapon'))",
        "effect": "room.players.forEach(p => { if ((db.get_user(p).heistinven||[]).some(i => i.type==='weapon')) { room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0) - 20) } }) 'Senjata gagal digunakan, -20 ATK untuk yang membawa senjata'",
        "reward": 0
      }
    ]
  },
  {
    "name": "Rencana Gagal",
    "description": "Mastermind membuat perhitungan yang salah, menyebabkan kekacauan.",
    "resolutions": [
      {
        "condition": "room.players.some(p => room.roles[p] === 'Mastermind')",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0) - 15) }) 'Strategi gagal, semua kehilangan 15 ATK'",
        "reward": -20
      }
    ]
  },
  {
    "name": "Ledakan Prematur",
    "description": "Demolitionist salah waktu meledakkan bahan peledak.",
    "resolutions": [
      {
        "condition": "room.players.some(p => room.roles[p] === 'Demolitionist')",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0) - 25) }) 'C4 meledak terlalu cepat, semua kehilangan 25 ATK'",
        "reward": -30
      }
    ]
  },
  {
    "name": "Perangkap Laser",
    "description": "Laser aktif dan menyakiti tim saat menyusup.",
    "resolutions": [
      {
        "condition": "!room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.effect==='lasers'))",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0) - 30) }) 'Tanpa Laser Deflector, tim terkena laser, -30 ATK'",
        "reward": -25
      }
    ]
  },
  {
    "name": "Medic Tersandung",
    "description": "Medic terpeleset saat mencoba menyelamatkan tim, menyebabkan kekacauan.",
    "resolutions": [
      {
        "condition": "room.players.some(p => room.roles[p] === 'Medic')",
        "effect": "room.players.forEach(p => { room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0) - 10) }) 'Medic jatuh, tim panik dan kehilangan fokus (-10 ATK)'",
        "reward": -10
      }
    ]
  },
  {
    "name": "Amunisi Habis",
    "description": "Beberapa senjata kehabisan peluru di tengah baku tembak.",
    "resolutions": [
      {
        "condition": "room.players.some(p => (db.get_user(p).heistinven||[]).some(i => i.type==='weapon'))",
        "effect": "room.players.forEach(p => { if ((db.get_user(p).heistinven||[]).some(i => i.type==='weapon')) { room.heist.attack[p] = Math.max(0, (room.heist.attack[p]||0) - 15) } }) 'Kehabisan peluru, -15 ATK bagi pengguna senjata'",
        "reward": -5
      }
    ]
  }
]